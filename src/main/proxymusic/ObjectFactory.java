//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, vJAXB 2.1.3 in JDK 1.6 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2009.06.22 at 11:25:35 PM CEST 
//


package proxymusic;

import javax.xml.bind.JAXBElement;
import javax.xml.bind.annotation.XmlElementDecl;
import javax.xml.bind.annotation.XmlRegistry;
import javax.xml.datatype.XMLGregorianCalendar;
import javax.xml.namespace.QName;


/**
 * This object contains factory methods for each 
 * Java content interface and Java element interface 
 * generated in the proxymusic package. 
 * <p>An ObjectFactory allows you to programatically 
 * construct new instances of the Java representation 
 * for XML content. The Java representation of XML 
 * content can consist of schema derived interfaces 
 * and classes representing the binding of schema 
 * type definitions, element declarations and model 
 * groups.  Factory methods for each of these are 
 * provided in this class.
 * 
 */
@XmlRegistry
public class ObjectFactory {

    private final static QName _TechnicalDoubleTongue_QNAME = new QName("", "double-tongue");
    private final static QName _TechnicalToe_QNAME = new QName("", "toe");
    private final static QName _TechnicalFret_QNAME = new QName("", "fret");
    private final static QName _TechnicalHeel_QNAME = new QName("", "heel");
    private final static QName _TechnicalBend_QNAME = new QName("", "bend");
    private final static QName _TechnicalPluck_QNAME = new QName("", "pluck");
    private final static QName _TechnicalFingering_QNAME = new QName("", "fingering");
    private final static QName _TechnicalSnapPizzicato_QNAME = new QName("", "snap-pizzicato");
    private final static QName _TechnicalUpBow_QNAME = new QName("", "up-bow");
    private final static QName _TechnicalHammerOn_QNAME = new QName("", "hammer-on");
    private final static QName _TechnicalThumbPosition_QNAME = new QName("", "thumb-position");
    private final static QName _TechnicalOpenString_QNAME = new QName("", "open-string");
    private final static QName _TechnicalStopped_QNAME = new QName("", "stopped");
    private final static QName _TechnicalPullOff_QNAME = new QName("", "pull-off");
    private final static QName _TechnicalFingernails_QNAME = new QName("", "fingernails");
    private final static QName _TechnicalString_QNAME = new QName("", "string");
    private final static QName _TechnicalTripleTongue_QNAME = new QName("", "triple-tongue");
    private final static QName _TechnicalHarmonic_QNAME = new QName("", "harmonic");
    private final static QName _TechnicalTap_QNAME = new QName("", "tap");
    private final static QName _TechnicalOtherTechnical_QNAME = new QName("", "other-technical");
    private final static QName _TechnicalDownBow_QNAME = new QName("", "down-bow");
    private final static QName _DynamicsPppp_QNAME = new QName("", "pppp");
    private final static QName _DynamicsF_QNAME = new QName("", "f");
    private final static QName _DynamicsSfpp_QNAME = new QName("", "sfpp");
    private final static QName _DynamicsFz_QNAME = new QName("", "fz");
    private final static QName _DynamicsRfz_QNAME = new QName("", "rfz");
    private final static QName _DynamicsMp_QNAME = new QName("", "mp");
    private final static QName _DynamicsOtherDynamics_QNAME = new QName("", "other-dynamics");
    private final static QName _DynamicsPpppp_QNAME = new QName("", "ppppp");
    private final static QName _DynamicsSffz_QNAME = new QName("", "sffz");
    private final static QName _DynamicsPpp_QNAME = new QName("", "ppp");
    private final static QName _DynamicsFfffff_QNAME = new QName("", "ffffff");
    private final static QName _DynamicsSf_QNAME = new QName("", "sf");
    private final static QName _DynamicsRf_QNAME = new QName("", "rf");
    private final static QName _DynamicsSfz_QNAME = new QName("", "sfz");
    private final static QName _DynamicsFff_QNAME = new QName("", "fff");
    private final static QName _DynamicsFf_QNAME = new QName("", "ff");
    private final static QName _DynamicsPppppp_QNAME = new QName("", "pppppp");
    private final static QName _DynamicsP_QNAME = new QName("", "p");
    private final static QName _DynamicsSfp_QNAME = new QName("", "sfp");
    private final static QName _DynamicsMf_QNAME = new QName("", "mf");
    private final static QName _DynamicsFffff_QNAME = new QName("", "fffff");
    private final static QName _DynamicsPp_QNAME = new QName("", "pp");
    private final static QName _DynamicsFfff_QNAME = new QName("", "ffff");
    private final static QName _DynamicsFp_QNAME = new QName("", "fp");
    private final static QName _TimeBeats_QNAME = new QName("", "beats");
    private final static QName _TimeBeatType_QNAME = new QName("", "beat-type");
    private final static QName _OrnamentsOtherOrnament_QNAME = new QName("", "other-ornament");
    private final static QName _OrnamentsTurn_QNAME = new QName("", "turn");
    private final static QName _OrnamentsMordent_QNAME = new QName("", "mordent");
    private final static QName _OrnamentsTremolo_QNAME = new QName("", "tremolo");
    private final static QName _OrnamentsWavyLine_QNAME = new QName("", "wavy-line");
    private final static QName _OrnamentsShake_QNAME = new QName("", "shake");
    private final static QName _OrnamentsInvertedMordent_QNAME = new QName("", "inverted-mordent");
    private final static QName _OrnamentsTrillMark_QNAME = new QName("", "trill-mark");
    private final static QName _OrnamentsAccidentalMark_QNAME = new QName("", "accidental-mark");
    private final static QName _OrnamentsSchleifer_QNAME = new QName("", "schleifer");
    private final static QName _OrnamentsDelayedTurn_QNAME = new QName("", "delayed-turn");
    private final static QName _OrnamentsInvertedTurn_QNAME = new QName("", "inverted-turn");
    private final static QName _ArticulationsUnstress_QNAME = new QName("", "unstress");
    private final static QName _ArticulationsTenuto_QNAME = new QName("", "tenuto");
    private final static QName _ArticulationsStrongAccent_QNAME = new QName("", "strong-accent");
    private final static QName _ArticulationsDoit_QNAME = new QName("", "doit");
    private final static QName _ArticulationsCaesura_QNAME = new QName("", "caesura");
    private final static QName _ArticulationsFalloff_QNAME = new QName("", "falloff");
    private final static QName _ArticulationsStress_QNAME = new QName("", "stress");
    private final static QName _ArticulationsDetachedLegato_QNAME = new QName("", "detached-legato");
    private final static QName _ArticulationsPlop_QNAME = new QName("", "plop");
    private final static QName _ArticulationsScoop_QNAME = new QName("", "scoop");
    private final static QName _ArticulationsStaccatissimo_QNAME = new QName("", "staccatissimo");
    private final static QName _ArticulationsOtherArticulation_QNAME = new QName("", "other-articulation");
    private final static QName _ArticulationsAccent_QNAME = new QName("", "accent");
    private final static QName _ArticulationsBreathMark_QNAME = new QName("", "breath-mark");
    private final static QName _ArticulationsStaccato_QNAME = new QName("", "staccato");
    private final static QName _ArticulationsSpiccato_QNAME = new QName("", "spiccato");
    private final static QName _EncodingSoftware_QNAME = new QName("", "software");
    private final static QName _EncodingSupports_QNAME = new QName("", "supports");
    private final static QName _EncodingEncodingDate_QNAME = new QName("", "encoding-date");
    private final static QName _EncodingEncoder_QNAME = new QName("", "encoder");
    private final static QName _EncodingEncodingDescription_QNAME = new QName("", "encoding-description");

    /**
     * Create a new ObjectFactory that can be used to create new instances of schema derived classes for package: proxymusic
     * 
     */
    public ObjectFactory() {
    }

    /**
     * Create an instance of {@link Tremolo }
     * 
     */
    public Tremolo createTremolo() {
        return new Tremolo();
    }

    /**
     * Create an instance of {@link Mordent }
     * 
     */
    public Mordent createMordent() {
        return new Mordent();
    }

    /**
     * Create an instance of {@link GroupSymbol }
     * 
     */
    public GroupSymbol createGroupSymbol() {
        return new GroupSymbol();
    }

    /**
     * Create an instance of {@link Scordatura }
     * 
     */
    public Scordatura createScordatura() {
        return new Scordatura();
    }

    /**
     * Create an instance of {@link PartGroup }
     * 
     */
    public PartGroup createPartGroup() {
        return new PartGroup();
    }

    /**
     * Create an instance of {@link TupletDot }
     * 
     */
    public TupletDot createTupletDot() {
        return new TupletDot();
    }

    /**
     * Create an instance of {@link Root }
     * 
     */
    public Root createRoot() {
        return new Root();
    }

    /**
     * Create an instance of {@link NameDisplay }
     * 
     */
    public NameDisplay createNameDisplay() {
        return new NameDisplay();
    }

    /**
     * Create an instance of {@link Wedge }
     * 
     */
    public Wedge createWedge() {
        return new Wedge();
    }

    /**
     * Create an instance of {@link Dashes }
     * 
     */
    public Dashes createDashes() {
        return new Dashes();
    }

    /**
     * Create an instance of {@link Extend }
     * 
     */
    public Extend createExtend() {
        return new Extend();
    }

    /**
     * Create an instance of {@link Forward }
     * 
     */
    public Forward createForward() {
        return new Forward();
    }

    /**
     * Create an instance of {@link MultipleRest }
     * 
     */
    public MultipleRest createMultipleRest() {
        return new MultipleRest();
    }

    /**
     * Create an instance of {@link LineWidth }
     * 
     */
    public LineWidth createLineWidth() {
        return new LineWidth();
    }

    /**
     * Create an instance of {@link Harmony }
     * 
     */
    public Harmony createHarmony() {
        return new Harmony();
    }

    /**
     * Create an instance of {@link OctaveShift }
     * 
     */
    public OctaveShift createOctaveShift() {
        return new OctaveShift();
    }

    /**
     * Create an instance of {@link Identification }
     * 
     */
    public Identification createIdentification() {
        return new Identification();
    }

    /**
     * Create an instance of {@link Scaling }
     * 
     */
    public Scaling createScaling() {
        return new Scaling();
    }

    /**
     * Create an instance of {@link Fermata }
     * 
     */
    public Fermata createFermata() {
        return new Fermata();
    }

    /**
     * Create an instance of {@link PageMargins }
     * 
     */
    public PageMargins createPageMargins() {
        return new PageMargins();
    }

    /**
     * Create an instance of {@link Sound }
     * 
     */
    public Sound createSound() {
        return new Sound();
    }

    /**
     * Create an instance of {@link OtherNotation }
     * 
     */
    public OtherNotation createOtherNotation() {
        return new OtherNotation();
    }

    /**
     * Create an instance of {@link Fret }
     * 
     */
    public Fret createFret() {
        return new Fret();
    }

    /**
     * Create an instance of {@link Pedal }
     * 
     */
    public Pedal createPedal() {
        return new Pedal();
    }

    /**
     * Create an instance of {@link PedalTuning }
     * 
     */
    public PedalTuning createPedalTuning() {
        return new PedalTuning();
    }

    /**
     * Create an instance of {@link MetronomeTuplet }
     * 
     */
    public MetronomeTuplet createMetronomeTuplet() {
        return new MetronomeTuplet();
    }

    /**
     * Create an instance of {@link FrameNote }
     * 
     */
    public FrameNote createFrameNote() {
        return new FrameNote();
    }

    /**
     * Create an instance of {@link Beam }
     * 
     */
    public Beam createBeam() {
        return new Beam();
    }

    /**
     * Create an instance of {@link MeasureRepeat }
     * 
     */
    public MeasureRepeat createMeasureRepeat() {
        return new MeasureRepeat();
    }

    /**
     * Create an instance of {@link MetronomeNote }
     * 
     */
    public MetronomeNote createMetronomeNote() {
        return new MetronomeNote();
    }

    /**
     * Create an instance of {@link NoteSize }
     * 
     */
    public NoteSize createNoteSize() {
        return new NoteSize();
    }

    /**
     * Create an instance of {@link DisplayStepOctave }
     * 
     */
    public DisplayStepOctave createDisplayStepOctave() {
        return new DisplayStepOctave();
    }

    /**
     * Create an instance of {@link ScorePart }
     * 
     */
    public ScorePart createScorePart() {
        return new ScorePart();
    }

    /**
     * Create an instance of {@link Ending }
     * 
     */
    public Ending createEnding() {
        return new Ending();
    }

    /**
     * Create an instance of {@link ScoreTimewise.Measure.Part }
     * 
     */
    public ScoreTimewise.Measure.Part createScoreTimewiseMeasurePart() {
        return new ScoreTimewise.Measure.Part();
    }

    /**
     * Create an instance of {@link FiguredBass }
     * 
     */
    public FiguredBass createFiguredBass() {
        return new FiguredBass();
    }

    /**
     * Create an instance of {@link Metronome }
     * 
     */
    public Metronome createMetronome() {
        return new Metronome();
    }

    /**
     * Create an instance of {@link EmptyFont }
     * 
     */
    public EmptyFont createEmptyFont() {
        return new EmptyFont();
    }

    /**
     * Create an instance of {@link TimeModification }
     * 
     */
    public TimeModification createTimeModification() {
        return new TimeModification();
    }

    /**
     * Create an instance of {@link Accord }
     * 
     */
    public Accord createAccord() {
        return new Accord();
    }

    /**
     * Create an instance of {@link Bend }
     * 
     */
    public Bend createBend() {
        return new Bend();
    }

    /**
     * Create an instance of {@link Key }
     * 
     */
    public Key createKey() {
        return new Key();
    }

    /**
     * Create an instance of {@link ScorePartwise.Part }
     * 
     */
    public ScorePartwise.Part createScorePartwisePart() {
        return new ScorePartwise.Part();
    }

    /**
     * Create an instance of {@link Time }
     * 
     */
    public Time createTime() {
        return new Time();
    }

    /**
     * Create an instance of {@link TupletPortion }
     * 
     */
    public TupletPortion createTupletPortion() {
        return new TupletPortion();
    }

    /**
     * Create an instance of {@link EmptyPrintStyle }
     * 
     */
    public EmptyPrintStyle createEmptyPrintStyle() {
        return new EmptyPrintStyle();
    }

    /**
     * Create an instance of {@link Attributes }
     * 
     */
    public Attributes createAttributes() {
        return new Attributes();
    }

    /**
     * Create an instance of {@link Image }
     * 
     */
    public Image createImage() {
        return new Image();
    }

    /**
     * Create an instance of {@link Elision }
     * 
     */
    public Elision createElision() {
        return new Elision();
    }

    /**
     * Create an instance of {@link Appearance }
     * 
     */
    public Appearance createAppearance() {
        return new Appearance();
    }

    /**
     * Create an instance of {@link Lyric }
     * 
     */
    public Lyric createLyric() {
        return new Lyric();
    }

    /**
     * Create an instance of {@link proxymusic.String }
     * 
     */
    public proxymusic.String createString() {
        return new proxymusic.String();
    }

    /**
     * Create an instance of {@link Stem }
     * 
     */
    public Stem createStem() {
        return new Stem();
    }

    /**
     * Create an instance of {@link Note }
     * 
     */
    public Note createNote() {
        return new Note();
    }

    /**
     * Create an instance of {@link Transpose }
     * 
     */
    public Transpose createTranspose() {
        return new Transpose();
    }

    /**
     * Create an instance of {@link Bass }
     * 
     */
    public Bass createBass() {
        return new Bass();
    }

    /**
     * Create an instance of {@link TypedText }
     * 
     */
    public TypedText createTypedText() {
        return new TypedText();
    }

    /**
     * Create an instance of {@link Slide }
     * 
     */
    public Slide createSlide() {
        return new Slide();
    }

    /**
     * Create an instance of {@link Fingering }
     * 
     */
    public Fingering createFingering() {
        return new Fingering();
    }

    /**
     * Create an instance of {@link PageLayout }
     * 
     */
    public PageLayout createPageLayout() {
        return new PageLayout();
    }

    /**
     * Create an instance of {@link Credit }
     * 
     */
    public Credit createCredit() {
        return new Credit();
    }

    /**
     * Create an instance of {@link Tied }
     * 
     */
    public Tied createTied() {
        return new Tied();
    }

    /**
     * Create an instance of {@link EmptyTrillSound }
     * 
     */
    public EmptyTrillSound createEmptyTrillSound() {
        return new EmptyTrillSound();
    }

    /**
     * Create an instance of {@link Clef }
     * 
     */
    public Clef createClef() {
        return new Clef();
    }

    /**
     * Create an instance of {@link Defaults }
     * 
     */
    public Defaults createDefaults() {
        return new Defaults();
    }

    /**
     * Create an instance of {@link PerMinute }
     * 
     */
    public PerMinute createPerMinute() {
        return new PerMinute();
    }

    /**
     * Create an instance of {@link BassAlter }
     * 
     */
    public BassAlter createBassAlter() {
        return new BassAlter();
    }

    /**
     * Create an instance of {@link BassStep }
     * 
     */
    public BassStep createBassStep() {
        return new BassStep();
    }

    /**
     * Create an instance of {@link Barre }
     * 
     */
    public Barre createBarre() {
        return new Barre();
    }

    /**
     * Create an instance of {@link ScorePartwise }
     * 
     */
    public ScorePartwise createScorePartwise() {
        return new ScorePartwise();
    }

    /**
     * Create an instance of {@link GroupName }
     * 
     */
    public GroupName createGroupName() {
        return new GroupName();
    }

    /**
     * Create an instance of {@link Work }
     * 
     */
    public Work createWork() {
        return new Work();
    }

    /**
     * Create an instance of {@link Inversion }
     * 
     */
    public Inversion createInversion() {
        return new Inversion();
    }

    /**
     * Create an instance of {@link Opus }
     * 
     */
    public Opus createOpus() {
        return new Opus();
    }

    /**
     * Create an instance of {@link Encoding }
     * 
     */
    public Encoding createEncoding() {
        return new Encoding();
    }

    /**
     * Create an instance of {@link Link }
     * 
     */
    public Link createLink() {
        return new Link();
    }

    /**
     * Create an instance of {@link TupletType }
     * 
     */
    public TupletType createTupletType() {
        return new TupletType();
    }

    /**
     * Create an instance of {@link HeelToe }
     * 
     */
    public HeelToe createHeelToe() {
        return new HeelToe();
    }

    /**
     * Create an instance of {@link Slur }
     * 
     */
    public Slur createSlur() {
        return new Slur();
    }

    /**
     * Create an instance of {@link DegreeValue }
     * 
     */
    public DegreeValue createDegreeValue() {
        return new DegreeValue();
    }

    /**
     * Create an instance of {@link Direction }
     * 
     */
    public Direction createDirection() {
        return new Direction();
    }

    /**
     * Create an instance of {@link MetronomeBeam }
     * 
     */
    public MetronomeBeam createMetronomeBeam() {
        return new MetronomeBeam();
    }

    /**
     * Create an instance of {@link Barline }
     * 
     */
    public Barline createBarline() {
        return new Barline();
    }

    /**
     * Create an instance of {@link SystemMargins }
     * 
     */
    public SystemMargins createSystemMargins() {
        return new SystemMargins();
    }

    /**
     * Create an instance of {@link HammerOnPullOff }
     * 
     */
    public HammerOnPullOff createHammerOnPullOff() {
        return new HammerOnPullOff();
    }

    /**
     * Create an instance of {@link EmptyPlacement }
     * 
     */
    public EmptyPlacement createEmptyPlacement() {
        return new EmptyPlacement();
    }

    /**
     * Create an instance of {@link RootStep }
     * 
     */
    public RootStep createRootStep() {
        return new RootStep();
    }

    /**
     * Create an instance of {@link Figure }
     * 
     */
    public Figure createFigure() {
        return new Figure();
    }

    /**
     * Create an instance of {@link Notehead }
     * 
     */
    public Notehead createNotehead() {
        return new Notehead();
    }

    /**
     * Create an instance of {@link MeasureLayout }
     * 
     */
    public MeasureLayout createMeasureLayout() {
        return new MeasureLayout();
    }

    /**
     * Create an instance of {@link Miscellaneous }
     * 
     */
    public Miscellaneous createMiscellaneous() {
        return new Miscellaneous();
    }

    /**
     * Create an instance of {@link StyleText }
     * 
     */
    public StyleText createStyleText() {
        return new StyleText();
    }

    /**
     * Create an instance of {@link Print }
     * 
     */
    public Print createPrint() {
        return new Print();
    }

    /**
     * Create an instance of {@link DirectionType }
     * 
     */
    public DirectionType createDirectionType() {
        return new DirectionType();
    }

    /**
     * Create an instance of {@link Empty }
     * 
     */
    public Empty createEmpty() {
        return new Empty();
    }

    /**
     * Create an instance of {@link MeasureStyle }
     * 
     */
    public MeasureStyle createMeasureStyle() {
        return new MeasureStyle();
    }

    /**
     * Create an instance of {@link StaffDetails }
     * 
     */
    public StaffDetails createStaffDetails() {
        return new StaffDetails();
    }

    /**
     * Create an instance of {@link TextElementData }
     * 
     */
    public TextElementData createTextElementData() {
        return new TextElementData();
    }

    /**
     * Create an instance of {@link StaffLayout }
     * 
     */
    public StaffLayout createStaffLayout() {
        return new StaffLayout();
    }

    /**
     * Create an instance of {@link DegreeType }
     * 
     */
    public DegreeType createDegreeType() {
        return new DegreeType();
    }

    /**
     * Create an instance of {@link MeasureNumbering }
     * 
     */
    public MeasureNumbering createMeasureNumbering() {
        return new MeasureNumbering();
    }

    /**
     * Create an instance of {@link BarStyleColor }
     * 
     */
    public BarStyleColor createBarStyleColor() {
        return new BarStyleColor();
    }

    /**
     * Create an instance of {@link ScoreTimewise }
     * 
     */
    public ScoreTimewise createScoreTimewise() {
        return new ScoreTimewise();
    }

    /**
     * Create an instance of {@link HarpPedals }
     * 
     */
    public HarpPedals createHarpPedals() {
        return new HarpPedals();
    }

    /**
     * Create an instance of {@link Rehearsal }
     * 
     */
    public Rehearsal createRehearsal() {
        return new Rehearsal();
    }

    /**
     * Create an instance of {@link PlacementText }
     * 
     */
    public PlacementText createPlacementText() {
        return new PlacementText();
    }

    /**
     * Create an instance of {@link NoteType }
     * 
     */
    public NoteType createNoteType() {
        return new NoteType();
    }

    /**
     * Create an instance of {@link NonArpeggiate }
     * 
     */
    public NonArpeggiate createNonArpeggiate() {
        return new NonArpeggiate();
    }

    /**
     * Create an instance of {@link Bracket }
     * 
     */
    public Bracket createBracket() {
        return new Bracket();
    }

    /**
     * Create an instance of {@link Accidental }
     * 
     */
    public Accidental createAccidental() {
        return new Accidental();
    }

    /**
     * Create an instance of {@link Arpeggiate }
     * 
     */
    public Arpeggiate createArpeggiate() {
        return new Arpeggiate();
    }

    /**
     * Create an instance of {@link StaffTuning }
     * 
     */
    public StaffTuning createStaffTuning() {
        return new StaffTuning();
    }

    /**
     * Create an instance of {@link Supports }
     * 
     */
    public Supports createSupports() {
        return new Supports();
    }

    /**
     * Create an instance of {@link SystemLayout }
     * 
     */
    public SystemLayout createSystemLayout() {
        return new SystemLayout();
    }

    /**
     * Create an instance of {@link Technical }
     * 
     */
    public Technical createTechnical() {
        return new Technical();
    }

    /**
     * Create an instance of {@link StrongAccent }
     * 
     */
    public StrongAccent createStrongAccent() {
        return new StrongAccent();
    }

    /**
     * Create an instance of {@link Backup }
     * 
     */
    public Backup createBackup() {
        return new Backup();
    }

    /**
     * Create an instance of {@link Dynamics }
     * 
     */
    public Dynamics createDynamics() {
        return new Dynamics();
    }

    /**
     * Create an instance of {@link Slash }
     * 
     */
    public Slash createSlash() {
        return new Slash();
    }

    /**
     * Create an instance of {@link ScoreTimewise.Measure }
     * 
     */
    public ScoreTimewise.Measure createScoreTimewiseMeasure() {
        return new ScoreTimewise.Measure();
    }

    /**
     * Create an instance of {@link AccidentalMark }
     * 
     */
    public AccidentalMark createAccidentalMark() {
        return new AccidentalMark();
    }

    /**
     * Create an instance of {@link ScorePartwise.Part.Measure }
     * 
     */
    public ScorePartwise.Part.Measure createScorePartwisePartMeasure() {
        return new ScorePartwise.Part.Measure();
    }

    /**
     * Create an instance of {@link OtherDirection }
     * 
     */
    public OtherDirection createOtherDirection() {
        return new OtherDirection();
    }

    /**
     * Create an instance of {@link Feature }
     * 
     */
    public Feature createFeature() {
        return new Feature();
    }

    /**
     * Create an instance of {@link Degree }
     * 
     */
    public Degree createDegree() {
        return new Degree();
    }

    /**
     * Create an instance of {@link KeyOctave }
     * 
     */
    public KeyOctave createKeyOctave() {
        return new KeyOctave();
    }

    /**
     * Create an instance of {@link Ornaments }
     * 
     */
    public Ornaments createOrnaments() {
        return new Ornaments();
    }

    /**
     * Create an instance of {@link EmptyLine }
     * 
     */
    public EmptyLine createEmptyLine() {
        return new EmptyLine();
    }

    /**
     * Create an instance of {@link Articulations }
     * 
     */
    public Articulations createArticulations() {
        return new Articulations();
    }

    /**
     * Create an instance of {@link Cancel }
     * 
     */
    public Cancel createCancel() {
        return new Cancel();
    }

    /**
     * Create an instance of {@link MidiInstrument }
     * 
     */
    public MidiInstrument createMidiInstrument() {
        return new MidiInstrument();
    }

    /**
     * Create an instance of {@link MiscellaneousField }
     * 
     */
    public MiscellaneousField createMiscellaneousField() {
        return new MiscellaneousField();
    }

    /**
     * Create an instance of {@link Offset }
     * 
     */
    public Offset createOffset() {
        return new Offset();
    }

    /**
     * Create an instance of {@link Attributes.Directive }
     * 
     */
    public Attributes.Directive createAttributesDirective() {
        return new Attributes.Directive();
    }

    /**
     * Create an instance of {@link WavyLine }
     * 
     */
    public WavyLine createWavyLine() {
        return new WavyLine();
    }

    /**
     * Create an instance of {@link MidiDevice }
     * 
     */
    public MidiDevice createMidiDevice() {
        return new MidiDevice();
    }

    /**
     * Create an instance of {@link Grouping }
     * 
     */
    public Grouping createGrouping() {
        return new Grouping();
    }

    /**
     * Create an instance of {@link PartList }
     * 
     */
    public PartList createPartList() {
        return new PartList();
    }

    /**
     * Create an instance of {@link GroupBarline }
     * 
     */
    public GroupBarline createGroupBarline() {
        return new GroupBarline();
    }

    /**
     * Create an instance of {@link BeatRepeat }
     * 
     */
    public BeatRepeat createBeatRepeat() {
        return new BeatRepeat();
    }

    /**
     * Create an instance of {@link Bookmark }
     * 
     */
    public Bookmark createBookmark() {
        return new Bookmark();
    }

    /**
     * Create an instance of {@link Tie }
     * 
     */
    public Tie createTie() {
        return new Tie();
    }

    /**
     * Create an instance of {@link Pitch }
     * 
     */
    public Pitch createPitch() {
        return new Pitch();
    }

    /**
     * Create an instance of {@link LyricLanguage }
     * 
     */
    public LyricLanguage createLyricLanguage() {
        return new LyricLanguage();
    }

    /**
     * Create an instance of {@link Kind }
     * 
     */
    public Kind createKind() {
        return new Kind();
    }

    /**
     * Create an instance of {@link Harmonic }
     * 
     */
    public Harmonic createHarmonic() {
        return new Harmonic();
    }

    /**
     * Create an instance of {@link PartName }
     * 
     */
    public PartName createPartName() {
        return new PartName();
    }

    /**
     * Create an instance of {@link Tuplet }
     * 
     */
    public Tuplet createTuplet() {
        return new Tuplet();
    }

    /**
     * Create an instance of {@link Frame }
     * 
     */
    public Frame createFrame() {
        return new Frame();
    }

    /**
     * Create an instance of {@link Level }
     * 
     */
    public Level createLevel() {
        return new Level();
    }

    /**
     * Create an instance of {@link LyricFont }
     * 
     */
    public LyricFont createLyricFont() {
        return new LyricFont();
    }

    /**
     * Create an instance of {@link Instrument }
     * 
     */
    public Instrument createInstrument() {
        return new Instrument();
    }

    /**
     * Create an instance of {@link DegreeAlter }
     * 
     */
    public DegreeAlter createDegreeAlter() {
        return new DegreeAlter();
    }

    /**
     * Create an instance of {@link FormattedText }
     * 
     */
    public FormattedText createFormattedText() {
        return new FormattedText();
    }

    /**
     * Create an instance of {@link PartSymbol }
     * 
     */
    public PartSymbol createPartSymbol() {
        return new PartSymbol();
    }

    /**
     * Create an instance of {@link TupletNumber }
     * 
     */
    public TupletNumber createTupletNumber() {
        return new TupletNumber();
    }

    /**
     * Create an instance of {@link ScoreInstrument }
     * 
     */
    public ScoreInstrument createScoreInstrument() {
        return new ScoreInstrument();
    }

    /**
     * Create an instance of {@link AccordionRegistration }
     * 
     */
    public AccordionRegistration createAccordionRegistration() {
        return new AccordionRegistration();
    }

    /**
     * Create an instance of {@link FirstFret }
     * 
     */
    public FirstFret createFirstFret() {
        return new FirstFret();
    }

    /**
     * Create an instance of {@link RootAlter }
     * 
     */
    public RootAlter createRootAlter() {
        return new RootAlter();
    }

    /**
     * Create an instance of {@link Glissando }
     * 
     */
    public Glissando createGlissando() {
        return new Glissando();
    }

    /**
     * Create an instance of {@link Grace }
     * 
     */
    public Grace createGrace() {
        return new Grace();
    }

    /**
     * Create an instance of {@link OtherAppearance }
     * 
     */
    public OtherAppearance createOtherAppearance() {
        return new OtherAppearance();
    }

    /**
     * Create an instance of {@link Notations }
     * 
     */
    public Notations createNotations() {
        return new Notations();
    }

    /**
     * Create an instance of {@link Repeat }
     * 
     */
    public Repeat createRepeat() {
        return new Repeat();
    }

    /**
     * Create an instance of {@link JAXBElement }{@code <}{@link EmptyPlacement }{@code >}}
     * 
     */
    @XmlElementDecl(namespace = "", name = "double-tongue", scope = Technical.class)
    public JAXBElement<EmptyPlacement> createTechnicalDoubleTongue(EmptyPlacement value) {
        return new JAXBElement<EmptyPlacement>(_TechnicalDoubleTongue_QNAME, EmptyPlacement.class, Technical.class, value);
    }

    /**
     * Create an instance of {@link JAXBElement }{@code <}{@link HeelToe }{@code >}}
     * 
     */
    @XmlElementDecl(namespace = "", name = "toe", scope = Technical.class)
    public JAXBElement<HeelToe> createTechnicalToe(HeelToe value) {
        return new JAXBElement<HeelToe>(_TechnicalToe_QNAME, HeelToe.class, Technical.class, value);
    }

    /**
     * Create an instance of {@link JAXBElement }{@code <}{@link Fret }{@code >}}
     * 
     */
    @XmlElementDecl(namespace = "", name = "fret", scope = Technical.class)
    public JAXBElement<Fret> createTechnicalFret(Fret value) {
        return new JAXBElement<Fret>(_TechnicalFret_QNAME, Fret.class, Technical.class, value);
    }

    /**
     * Create an instance of {@link JAXBElement }{@code <}{@link HeelToe }{@code >}}
     * 
     */
    @XmlElementDecl(namespace = "", name = "heel", scope = Technical.class)
    public JAXBElement<HeelToe> createTechnicalHeel(HeelToe value) {
        return new JAXBElement<HeelToe>(_TechnicalHeel_QNAME, HeelToe.class, Technical.class, value);
    }

    /**
     * Create an instance of {@link JAXBElement }{@code <}{@link Bend }{@code >}}
     * 
     */
    @XmlElementDecl(namespace = "", name = "bend", scope = Technical.class)
    public JAXBElement<Bend> createTechnicalBend(Bend value) {
        return new JAXBElement<Bend>(_TechnicalBend_QNAME, Bend.class, Technical.class, value);
    }

    /**
     * Create an instance of {@link JAXBElement }{@code <}{@link PlacementText }{@code >}}
     * 
     */
    @XmlElementDecl(namespace = "", name = "pluck", scope = Technical.class)
    public JAXBElement<PlacementText> createTechnicalPluck(PlacementText value) {
        return new JAXBElement<PlacementText>(_TechnicalPluck_QNAME, PlacementText.class, Technical.class, value);
    }

    /**
     * Create an instance of {@link JAXBElement }{@code <}{@link Fingering }{@code >}}
     * 
     */
    @XmlElementDecl(namespace = "", name = "fingering", scope = Technical.class)
    public JAXBElement<Fingering> createTechnicalFingering(Fingering value) {
        return new JAXBElement<Fingering>(_TechnicalFingering_QNAME, Fingering.class, Technical.class, value);
    }

    /**
     * Create an instance of {@link JAXBElement }{@code <}{@link EmptyPlacement }{@code >}}
     * 
     */
    @XmlElementDecl(namespace = "", name = "snap-pizzicato", scope = Technical.class)
    public JAXBElement<EmptyPlacement> createTechnicalSnapPizzicato(EmptyPlacement value) {
        return new JAXBElement<EmptyPlacement>(_TechnicalSnapPizzicato_QNAME, EmptyPlacement.class, Technical.class, value);
    }

    /**
     * Create an instance of {@link JAXBElement }{@code <}{@link EmptyPlacement }{@code >}}
     * 
     */
    @XmlElementDecl(namespace = "", name = "up-bow", scope = Technical.class)
    public JAXBElement<EmptyPlacement> createTechnicalUpBow(EmptyPlacement value) {
        return new JAXBElement<EmptyPlacement>(_TechnicalUpBow_QNAME, EmptyPlacement.class, Technical.class, value);
    }

    /**
     * Create an instance of {@link JAXBElement }{@code <}{@link HammerOnPullOff }{@code >}}
     * 
     */
    @XmlElementDecl(namespace = "", name = "hammer-on", scope = Technical.class)
    public JAXBElement<HammerOnPullOff> createTechnicalHammerOn(HammerOnPullOff value) {
        return new JAXBElement<HammerOnPullOff>(_TechnicalHammerOn_QNAME, HammerOnPullOff.class, Technical.class, value);
    }

    /**
     * Create an instance of {@link JAXBElement }{@code <}{@link EmptyPlacement }{@code >}}
     * 
     */
    @XmlElementDecl(namespace = "", name = "thumb-position", scope = Technical.class)
    public JAXBElement<EmptyPlacement> createTechnicalThumbPosition(EmptyPlacement value) {
        return new JAXBElement<EmptyPlacement>(_TechnicalThumbPosition_QNAME, EmptyPlacement.class, Technical.class, value);
    }

    /**
     * Create an instance of {@link JAXBElement }{@code <}{@link EmptyPlacement }{@code >}}
     * 
     */
    @XmlElementDecl(namespace = "", name = "open-string", scope = Technical.class)
    public JAXBElement<EmptyPlacement> createTechnicalOpenString(EmptyPlacement value) {
        return new JAXBElement<EmptyPlacement>(_TechnicalOpenString_QNAME, EmptyPlacement.class, Technical.class, value);
    }

    /**
     * Create an instance of {@link JAXBElement }{@code <}{@link EmptyPlacement }{@code >}}
     * 
     */
    @XmlElementDecl(namespace = "", name = "stopped", scope = Technical.class)
    public JAXBElement<EmptyPlacement> createTechnicalStopped(EmptyPlacement value) {
        return new JAXBElement<EmptyPlacement>(_TechnicalStopped_QNAME, EmptyPlacement.class, Technical.class, value);
    }

    /**
     * Create an instance of {@link JAXBElement }{@code <}{@link HammerOnPullOff }{@code >}}
     * 
     */
    @XmlElementDecl(namespace = "", name = "pull-off", scope = Technical.class)
    public JAXBElement<HammerOnPullOff> createTechnicalPullOff(HammerOnPullOff value) {
        return new JAXBElement<HammerOnPullOff>(_TechnicalPullOff_QNAME, HammerOnPullOff.class, Technical.class, value);
    }

    /**
     * Create an instance of {@link JAXBElement }{@code <}{@link EmptyPlacement }{@code >}}
     * 
     */
    @XmlElementDecl(namespace = "", name = "fingernails", scope = Technical.class)
    public JAXBElement<EmptyPlacement> createTechnicalFingernails(EmptyPlacement value) {
        return new JAXBElement<EmptyPlacement>(_TechnicalFingernails_QNAME, EmptyPlacement.class, Technical.class, value);
    }

    /**
     * Create an instance of {@link JAXBElement }{@code <}{@link proxymusic.String }{@code >}}
     * 
     */
    @XmlElementDecl(namespace = "", name = "string", scope = Technical.class)
    public JAXBElement<proxymusic.String> createTechnicalString(proxymusic.String value) {
        return new JAXBElement<proxymusic.String>(_TechnicalString_QNAME, proxymusic.String.class, Technical.class, value);
    }

    /**
     * Create an instance of {@link JAXBElement }{@code <}{@link EmptyPlacement }{@code >}}
     * 
     */
    @XmlElementDecl(namespace = "", name = "triple-tongue", scope = Technical.class)
    public JAXBElement<EmptyPlacement> createTechnicalTripleTongue(EmptyPlacement value) {
        return new JAXBElement<EmptyPlacement>(_TechnicalTripleTongue_QNAME, EmptyPlacement.class, Technical.class, value);
    }

    /**
     * Create an instance of {@link JAXBElement }{@code <}{@link Harmonic }{@code >}}
     * 
     */
    @XmlElementDecl(namespace = "", name = "harmonic", scope = Technical.class)
    public JAXBElement<Harmonic> createTechnicalHarmonic(Harmonic value) {
        return new JAXBElement<Harmonic>(_TechnicalHarmonic_QNAME, Harmonic.class, Technical.class, value);
    }

    /**
     * Create an instance of {@link JAXBElement }{@code <}{@link PlacementText }{@code >}}
     * 
     */
    @XmlElementDecl(namespace = "", name = "tap", scope = Technical.class)
    public JAXBElement<PlacementText> createTechnicalTap(PlacementText value) {
        return new JAXBElement<PlacementText>(_TechnicalTap_QNAME, PlacementText.class, Technical.class, value);
    }

    /**
     * Create an instance of {@link JAXBElement }{@code <}{@link PlacementText }{@code >}}
     * 
     */
    @XmlElementDecl(namespace = "", name = "other-technical", scope = Technical.class)
    public JAXBElement<PlacementText> createTechnicalOtherTechnical(PlacementText value) {
        return new JAXBElement<PlacementText>(_TechnicalOtherTechnical_QNAME, PlacementText.class, Technical.class, value);
    }

    /**
     * Create an instance of {@link JAXBElement }{@code <}{@link EmptyPlacement }{@code >}}
     * 
     */
    @XmlElementDecl(namespace = "", name = "down-bow", scope = Technical.class)
    public JAXBElement<EmptyPlacement> createTechnicalDownBow(EmptyPlacement value) {
        return new JAXBElement<EmptyPlacement>(_TechnicalDownBow_QNAME, EmptyPlacement.class, Technical.class, value);
    }

    /**
     * Create an instance of {@link JAXBElement }{@code <}{@link Empty }{@code >}}
     * 
     */
    @XmlElementDecl(namespace = "", name = "pppp", scope = Dynamics.class)
    public JAXBElement<Empty> createDynamicsPppp(Empty value) {
        return new JAXBElement<Empty>(_DynamicsPppp_QNAME, Empty.class, Dynamics.class, value);
    }

    /**
     * Create an instance of {@link JAXBElement }{@code <}{@link Empty }{@code >}}
     * 
     */
    @XmlElementDecl(namespace = "", name = "f", scope = Dynamics.class)
    public JAXBElement<Empty> createDynamicsF(Empty value) {
        return new JAXBElement<Empty>(_DynamicsF_QNAME, Empty.class, Dynamics.class, value);
    }

    /**
     * Create an instance of {@link JAXBElement }{@code <}{@link Empty }{@code >}}
     * 
     */
    @XmlElementDecl(namespace = "", name = "sfpp", scope = Dynamics.class)
    public JAXBElement<Empty> createDynamicsSfpp(Empty value) {
        return new JAXBElement<Empty>(_DynamicsSfpp_QNAME, Empty.class, Dynamics.class, value);
    }

    /**
     * Create an instance of {@link JAXBElement }{@code <}{@link Empty }{@code >}}
     * 
     */
    @XmlElementDecl(namespace = "", name = "fz", scope = Dynamics.class)
    public JAXBElement<Empty> createDynamicsFz(Empty value) {
        return new JAXBElement<Empty>(_DynamicsFz_QNAME, Empty.class, Dynamics.class, value);
    }

    /**
     * Create an instance of {@link JAXBElement }{@code <}{@link Empty }{@code >}}
     * 
     */
    @XmlElementDecl(namespace = "", name = "rfz", scope = Dynamics.class)
    public JAXBElement<Empty> createDynamicsRfz(Empty value) {
        return new JAXBElement<Empty>(_DynamicsRfz_QNAME, Empty.class, Dynamics.class, value);
    }

    /**
     * Create an instance of {@link JAXBElement }{@code <}{@link Empty }{@code >}}
     * 
     */
    @XmlElementDecl(namespace = "", name = "mp", scope = Dynamics.class)
    public JAXBElement<Empty> createDynamicsMp(Empty value) {
        return new JAXBElement<Empty>(_DynamicsMp_QNAME, Empty.class, Dynamics.class, value);
    }

    /**
     * Create an instance of {@link JAXBElement }{@code <}{@link java.lang.String }{@code >}}
     * 
     */
    @XmlElementDecl(namespace = "", name = "other-dynamics", scope = Dynamics.class)
    public JAXBElement<java.lang.String> createDynamicsOtherDynamics(java.lang.String value) {
        return new JAXBElement<java.lang.String>(_DynamicsOtherDynamics_QNAME, java.lang.String.class, Dynamics.class, value);
    }

    /**
     * Create an instance of {@link JAXBElement }{@code <}{@link Empty }{@code >}}
     * 
     */
    @XmlElementDecl(namespace = "", name = "ppppp", scope = Dynamics.class)
    public JAXBElement<Empty> createDynamicsPpppp(Empty value) {
        return new JAXBElement<Empty>(_DynamicsPpppp_QNAME, Empty.class, Dynamics.class, value);
    }

    /**
     * Create an instance of {@link JAXBElement }{@code <}{@link Empty }{@code >}}
     * 
     */
    @XmlElementDecl(namespace = "", name = "sffz", scope = Dynamics.class)
    public JAXBElement<Empty> createDynamicsSffz(Empty value) {
        return new JAXBElement<Empty>(_DynamicsSffz_QNAME, Empty.class, Dynamics.class, value);
    }

    /**
     * Create an instance of {@link JAXBElement }{@code <}{@link Empty }{@code >}}
     * 
     */
    @XmlElementDecl(namespace = "", name = "ppp", scope = Dynamics.class)
    public JAXBElement<Empty> createDynamicsPpp(Empty value) {
        return new JAXBElement<Empty>(_DynamicsPpp_QNAME, Empty.class, Dynamics.class, value);
    }

    /**
     * Create an instance of {@link JAXBElement }{@code <}{@link Empty }{@code >}}
     * 
     */
    @XmlElementDecl(namespace = "", name = "ffffff", scope = Dynamics.class)
    public JAXBElement<Empty> createDynamicsFfffff(Empty value) {
        return new JAXBElement<Empty>(_DynamicsFfffff_QNAME, Empty.class, Dynamics.class, value);
    }

    /**
     * Create an instance of {@link JAXBElement }{@code <}{@link Empty }{@code >}}
     * 
     */
    @XmlElementDecl(namespace = "", name = "sf", scope = Dynamics.class)
    public JAXBElement<Empty> createDynamicsSf(Empty value) {
        return new JAXBElement<Empty>(_DynamicsSf_QNAME, Empty.class, Dynamics.class, value);
    }

    /**
     * Create an instance of {@link JAXBElement }{@code <}{@link Empty }{@code >}}
     * 
     */
    @XmlElementDecl(namespace = "", name = "rf", scope = Dynamics.class)
    public JAXBElement<Empty> createDynamicsRf(Empty value) {
        return new JAXBElement<Empty>(_DynamicsRf_QNAME, Empty.class, Dynamics.class, value);
    }

    /**
     * Create an instance of {@link JAXBElement }{@code <}{@link Empty }{@code >}}
     * 
     */
    @XmlElementDecl(namespace = "", name = "sfz", scope = Dynamics.class)
    public JAXBElement<Empty> createDynamicsSfz(Empty value) {
        return new JAXBElement<Empty>(_DynamicsSfz_QNAME, Empty.class, Dynamics.class, value);
    }

    /**
     * Create an instance of {@link JAXBElement }{@code <}{@link Empty }{@code >}}
     * 
     */
    @XmlElementDecl(namespace = "", name = "fff", scope = Dynamics.class)
    public JAXBElement<Empty> createDynamicsFff(Empty value) {
        return new JAXBElement<Empty>(_DynamicsFff_QNAME, Empty.class, Dynamics.class, value);
    }

    /**
     * Create an instance of {@link JAXBElement }{@code <}{@link Empty }{@code >}}
     * 
     */
    @XmlElementDecl(namespace = "", name = "ff", scope = Dynamics.class)
    public JAXBElement<Empty> createDynamicsFf(Empty value) {
        return new JAXBElement<Empty>(_DynamicsFf_QNAME, Empty.class, Dynamics.class, value);
    }

    /**
     * Create an instance of {@link JAXBElement }{@code <}{@link Empty }{@code >}}
     * 
     */
    @XmlElementDecl(namespace = "", name = "pppppp", scope = Dynamics.class)
    public JAXBElement<Empty> createDynamicsPppppp(Empty value) {
        return new JAXBElement<Empty>(_DynamicsPppppp_QNAME, Empty.class, Dynamics.class, value);
    }

    /**
     * Create an instance of {@link JAXBElement }{@code <}{@link Empty }{@code >}}
     * 
     */
    @XmlElementDecl(namespace = "", name = "p", scope = Dynamics.class)
    public JAXBElement<Empty> createDynamicsP(Empty value) {
        return new JAXBElement<Empty>(_DynamicsP_QNAME, Empty.class, Dynamics.class, value);
    }

    /**
     * Create an instance of {@link JAXBElement }{@code <}{@link Empty }{@code >}}
     * 
     */
    @XmlElementDecl(namespace = "", name = "sfp", scope = Dynamics.class)
    public JAXBElement<Empty> createDynamicsSfp(Empty value) {
        return new JAXBElement<Empty>(_DynamicsSfp_QNAME, Empty.class, Dynamics.class, value);
    }

    /**
     * Create an instance of {@link JAXBElement }{@code <}{@link Empty }{@code >}}
     * 
     */
    @XmlElementDecl(namespace = "", name = "mf", scope = Dynamics.class)
    public JAXBElement<Empty> createDynamicsMf(Empty value) {
        return new JAXBElement<Empty>(_DynamicsMf_QNAME, Empty.class, Dynamics.class, value);
    }

    /**
     * Create an instance of {@link JAXBElement }{@code <}{@link Empty }{@code >}}
     * 
     */
    @XmlElementDecl(namespace = "", name = "fffff", scope = Dynamics.class)
    public JAXBElement<Empty> createDynamicsFffff(Empty value) {
        return new JAXBElement<Empty>(_DynamicsFffff_QNAME, Empty.class, Dynamics.class, value);
    }

    /**
     * Create an instance of {@link JAXBElement }{@code <}{@link Empty }{@code >}}
     * 
     */
    @XmlElementDecl(namespace = "", name = "pp", scope = Dynamics.class)
    public JAXBElement<Empty> createDynamicsPp(Empty value) {
        return new JAXBElement<Empty>(_DynamicsPp_QNAME, Empty.class, Dynamics.class, value);
    }

    /**
     * Create an instance of {@link JAXBElement }{@code <}{@link Empty }{@code >}}
     * 
     */
    @XmlElementDecl(namespace = "", name = "ffff", scope = Dynamics.class)
    public JAXBElement<Empty> createDynamicsFfff(Empty value) {
        return new JAXBElement<Empty>(_DynamicsFfff_QNAME, Empty.class, Dynamics.class, value);
    }

    /**
     * Create an instance of {@link JAXBElement }{@code <}{@link Empty }{@code >}}
     * 
     */
    @XmlElementDecl(namespace = "", name = "fp", scope = Dynamics.class)
    public JAXBElement<Empty> createDynamicsFp(Empty value) {
        return new JAXBElement<Empty>(_DynamicsFp_QNAME, Empty.class, Dynamics.class, value);
    }

    /**
     * Create an instance of {@link JAXBElement }{@code <}{@link java.lang.String }{@code >}}
     * 
     */
    @XmlElementDecl(namespace = "", name = "beats", scope = Time.class)
    public JAXBElement<java.lang.String> createTimeBeats(java.lang.String value) {
        return new JAXBElement<java.lang.String>(_TimeBeats_QNAME, java.lang.String.class, Time.class, value);
    }

    /**
     * Create an instance of {@link JAXBElement }{@code <}{@link java.lang.String }{@code >}}
     * 
     */
    @XmlElementDecl(namespace = "", name = "beat-type", scope = Time.class)
    public JAXBElement<java.lang.String> createTimeBeatType(java.lang.String value) {
        return new JAXBElement<java.lang.String>(_TimeBeatType_QNAME, java.lang.String.class, Time.class, value);
    }

    /**
     * Create an instance of {@link JAXBElement }{@code <}{@link PlacementText }{@code >}}
     * 
     */
    @XmlElementDecl(namespace = "", name = "other-ornament", scope = Ornaments.class)
    public JAXBElement<PlacementText> createOrnamentsOtherOrnament(PlacementText value) {
        return new JAXBElement<PlacementText>(_OrnamentsOtherOrnament_QNAME, PlacementText.class, Ornaments.class, value);
    }

    /**
     * Create an instance of {@link JAXBElement }{@code <}{@link EmptyTrillSound }{@code >}}
     * 
     */
    @XmlElementDecl(namespace = "", name = "turn", scope = Ornaments.class)
    public JAXBElement<EmptyTrillSound> createOrnamentsTurn(EmptyTrillSound value) {
        return new JAXBElement<EmptyTrillSound>(_OrnamentsTurn_QNAME, EmptyTrillSound.class, Ornaments.class, value);
    }

    /**
     * Create an instance of {@link JAXBElement }{@code <}{@link Mordent }{@code >}}
     * 
     */
    @XmlElementDecl(namespace = "", name = "mordent", scope = Ornaments.class)
    public JAXBElement<Mordent> createOrnamentsMordent(Mordent value) {
        return new JAXBElement<Mordent>(_OrnamentsMordent_QNAME, Mordent.class, Ornaments.class, value);
    }

    /**
     * Create an instance of {@link JAXBElement }{@code <}{@link Tremolo }{@code >}}
     * 
     */
    @XmlElementDecl(namespace = "", name = "tremolo", scope = Ornaments.class)
    public JAXBElement<Tremolo> createOrnamentsTremolo(Tremolo value) {
        return new JAXBElement<Tremolo>(_OrnamentsTremolo_QNAME, Tremolo.class, Ornaments.class, value);
    }

    /**
     * Create an instance of {@link JAXBElement }{@code <}{@link WavyLine }{@code >}}
     * 
     */
    @XmlElementDecl(namespace = "", name = "wavy-line", scope = Ornaments.class)
    public JAXBElement<WavyLine> createOrnamentsWavyLine(WavyLine value) {
        return new JAXBElement<WavyLine>(_OrnamentsWavyLine_QNAME, WavyLine.class, Ornaments.class, value);
    }

    /**
     * Create an instance of {@link JAXBElement }{@code <}{@link EmptyTrillSound }{@code >}}
     * 
     */
    @XmlElementDecl(namespace = "", name = "shake", scope = Ornaments.class)
    public JAXBElement<EmptyTrillSound> createOrnamentsShake(EmptyTrillSound value) {
        return new JAXBElement<EmptyTrillSound>(_OrnamentsShake_QNAME, EmptyTrillSound.class, Ornaments.class, value);
    }

    /**
     * Create an instance of {@link JAXBElement }{@code <}{@link Mordent }{@code >}}
     * 
     */
    @XmlElementDecl(namespace = "", name = "inverted-mordent", scope = Ornaments.class)
    public JAXBElement<Mordent> createOrnamentsInvertedMordent(Mordent value) {
        return new JAXBElement<Mordent>(_OrnamentsInvertedMordent_QNAME, Mordent.class, Ornaments.class, value);
    }

    /**
     * Create an instance of {@link JAXBElement }{@code <}{@link EmptyTrillSound }{@code >}}
     * 
     */
    @XmlElementDecl(namespace = "", name = "trill-mark", scope = Ornaments.class)
    public JAXBElement<EmptyTrillSound> createOrnamentsTrillMark(EmptyTrillSound value) {
        return new JAXBElement<EmptyTrillSound>(_OrnamentsTrillMark_QNAME, EmptyTrillSound.class, Ornaments.class, value);
    }

    /**
     * Create an instance of {@link JAXBElement }{@code <}{@link AccidentalMark }{@code >}}
     * 
     */
    @XmlElementDecl(namespace = "", name = "accidental-mark", scope = Ornaments.class)
    public JAXBElement<AccidentalMark> createOrnamentsAccidentalMark(AccidentalMark value) {
        return new JAXBElement<AccidentalMark>(_OrnamentsAccidentalMark_QNAME, AccidentalMark.class, Ornaments.class, value);
    }

    /**
     * Create an instance of {@link JAXBElement }{@code <}{@link EmptyPlacement }{@code >}}
     * 
     */
    @XmlElementDecl(namespace = "", name = "schleifer", scope = Ornaments.class)
    public JAXBElement<EmptyPlacement> createOrnamentsSchleifer(EmptyPlacement value) {
        return new JAXBElement<EmptyPlacement>(_OrnamentsSchleifer_QNAME, EmptyPlacement.class, Ornaments.class, value);
    }

    /**
     * Create an instance of {@link JAXBElement }{@code <}{@link EmptyTrillSound }{@code >}}
     * 
     */
    @XmlElementDecl(namespace = "", name = "delayed-turn", scope = Ornaments.class)
    public JAXBElement<EmptyTrillSound> createOrnamentsDelayedTurn(EmptyTrillSound value) {
        return new JAXBElement<EmptyTrillSound>(_OrnamentsDelayedTurn_QNAME, EmptyTrillSound.class, Ornaments.class, value);
    }

    /**
     * Create an instance of {@link JAXBElement }{@code <}{@link EmptyTrillSound }{@code >}}
     * 
     */
    @XmlElementDecl(namespace = "", name = "inverted-turn", scope = Ornaments.class)
    public JAXBElement<EmptyTrillSound> createOrnamentsInvertedTurn(EmptyTrillSound value) {
        return new JAXBElement<EmptyTrillSound>(_OrnamentsInvertedTurn_QNAME, EmptyTrillSound.class, Ornaments.class, value);
    }

    /**
     * Create an instance of {@link JAXBElement }{@code <}{@link EmptyPlacement }{@code >}}
     * 
     */
    @XmlElementDecl(namespace = "", name = "unstress", scope = Articulations.class)
    public JAXBElement<EmptyPlacement> createArticulationsUnstress(EmptyPlacement value) {
        return new JAXBElement<EmptyPlacement>(_ArticulationsUnstress_QNAME, EmptyPlacement.class, Articulations.class, value);
    }

    /**
     * Create an instance of {@link JAXBElement }{@code <}{@link EmptyPlacement }{@code >}}
     * 
     */
    @XmlElementDecl(namespace = "", name = "tenuto", scope = Articulations.class)
    public JAXBElement<EmptyPlacement> createArticulationsTenuto(EmptyPlacement value) {
        return new JAXBElement<EmptyPlacement>(_ArticulationsTenuto_QNAME, EmptyPlacement.class, Articulations.class, value);
    }

    /**
     * Create an instance of {@link JAXBElement }{@code <}{@link StrongAccent }{@code >}}
     * 
     */
    @XmlElementDecl(namespace = "", name = "strong-accent", scope = Articulations.class)
    public JAXBElement<StrongAccent> createArticulationsStrongAccent(StrongAccent value) {
        return new JAXBElement<StrongAccent>(_ArticulationsStrongAccent_QNAME, StrongAccent.class, Articulations.class, value);
    }

    /**
     * Create an instance of {@link JAXBElement }{@code <}{@link EmptyLine }{@code >}}
     * 
     */
    @XmlElementDecl(namespace = "", name = "doit", scope = Articulations.class)
    public JAXBElement<EmptyLine> createArticulationsDoit(EmptyLine value) {
        return new JAXBElement<EmptyLine>(_ArticulationsDoit_QNAME, EmptyLine.class, Articulations.class, value);
    }

    /**
     * Create an instance of {@link JAXBElement }{@code <}{@link EmptyPlacement }{@code >}}
     * 
     */
    @XmlElementDecl(namespace = "", name = "caesura", scope = Articulations.class)
    public JAXBElement<EmptyPlacement> createArticulationsCaesura(EmptyPlacement value) {
        return new JAXBElement<EmptyPlacement>(_ArticulationsCaesura_QNAME, EmptyPlacement.class, Articulations.class, value);
    }

    /**
     * Create an instance of {@link JAXBElement }{@code <}{@link EmptyLine }{@code >}}
     * 
     */
    @XmlElementDecl(namespace = "", name = "falloff", scope = Articulations.class)
    public JAXBElement<EmptyLine> createArticulationsFalloff(EmptyLine value) {
        return new JAXBElement<EmptyLine>(_ArticulationsFalloff_QNAME, EmptyLine.class, Articulations.class, value);
    }

    /**
     * Create an instance of {@link JAXBElement }{@code <}{@link EmptyPlacement }{@code >}}
     * 
     */
    @XmlElementDecl(namespace = "", name = "stress", scope = Articulations.class)
    public JAXBElement<EmptyPlacement> createArticulationsStress(EmptyPlacement value) {
        return new JAXBElement<EmptyPlacement>(_ArticulationsStress_QNAME, EmptyPlacement.class, Articulations.class, value);
    }

    /**
     * Create an instance of {@link JAXBElement }{@code <}{@link EmptyPlacement }{@code >}}
     * 
     */
    @XmlElementDecl(namespace = "", name = "detached-legato", scope = Articulations.class)
    public JAXBElement<EmptyPlacement> createArticulationsDetachedLegato(EmptyPlacement value) {
        return new JAXBElement<EmptyPlacement>(_ArticulationsDetachedLegato_QNAME, EmptyPlacement.class, Articulations.class, value);
    }

    /**
     * Create an instance of {@link JAXBElement }{@code <}{@link EmptyLine }{@code >}}
     * 
     */
    @XmlElementDecl(namespace = "", name = "plop", scope = Articulations.class)
    public JAXBElement<EmptyLine> createArticulationsPlop(EmptyLine value) {
        return new JAXBElement<EmptyLine>(_ArticulationsPlop_QNAME, EmptyLine.class, Articulations.class, value);
    }

    /**
     * Create an instance of {@link JAXBElement }{@code <}{@link EmptyLine }{@code >}}
     * 
     */
    @XmlElementDecl(namespace = "", name = "scoop", scope = Articulations.class)
    public JAXBElement<EmptyLine> createArticulationsScoop(EmptyLine value) {
        return new JAXBElement<EmptyLine>(_ArticulationsScoop_QNAME, EmptyLine.class, Articulations.class, value);
    }

    /**
     * Create an instance of {@link JAXBElement }{@code <}{@link EmptyPlacement }{@code >}}
     * 
     */
    @XmlElementDecl(namespace = "", name = "staccatissimo", scope = Articulations.class)
    public JAXBElement<EmptyPlacement> createArticulationsStaccatissimo(EmptyPlacement value) {
        return new JAXBElement<EmptyPlacement>(_ArticulationsStaccatissimo_QNAME, EmptyPlacement.class, Articulations.class, value);
    }

    /**
     * Create an instance of {@link JAXBElement }{@code <}{@link PlacementText }{@code >}}
     * 
     */
    @XmlElementDecl(namespace = "", name = "other-articulation", scope = Articulations.class)
    public JAXBElement<PlacementText> createArticulationsOtherArticulation(PlacementText value) {
        return new JAXBElement<PlacementText>(_ArticulationsOtherArticulation_QNAME, PlacementText.class, Articulations.class, value);
    }

    /**
     * Create an instance of {@link JAXBElement }{@code <}{@link EmptyPlacement }{@code >}}
     * 
     */
    @XmlElementDecl(namespace = "", name = "accent", scope = Articulations.class)
    public JAXBElement<EmptyPlacement> createArticulationsAccent(EmptyPlacement value) {
        return new JAXBElement<EmptyPlacement>(_ArticulationsAccent_QNAME, EmptyPlacement.class, Articulations.class, value);
    }

    /**
     * Create an instance of {@link JAXBElement }{@code <}{@link EmptyPlacement }{@code >}}
     * 
     */
    @XmlElementDecl(namespace = "", name = "breath-mark", scope = Articulations.class)
    public JAXBElement<EmptyPlacement> createArticulationsBreathMark(EmptyPlacement value) {
        return new JAXBElement<EmptyPlacement>(_ArticulationsBreathMark_QNAME, EmptyPlacement.class, Articulations.class, value);
    }

    /**
     * Create an instance of {@link JAXBElement }{@code <}{@link EmptyPlacement }{@code >}}
     * 
     */
    @XmlElementDecl(namespace = "", name = "staccato", scope = Articulations.class)
    public JAXBElement<EmptyPlacement> createArticulationsStaccato(EmptyPlacement value) {
        return new JAXBElement<EmptyPlacement>(_ArticulationsStaccato_QNAME, EmptyPlacement.class, Articulations.class, value);
    }

    /**
     * Create an instance of {@link JAXBElement }{@code <}{@link EmptyPlacement }{@code >}}
     * 
     */
    @XmlElementDecl(namespace = "", name = "spiccato", scope = Articulations.class)
    public JAXBElement<EmptyPlacement> createArticulationsSpiccato(EmptyPlacement value) {
        return new JAXBElement<EmptyPlacement>(_ArticulationsSpiccato_QNAME, EmptyPlacement.class, Articulations.class, value);
    }

    /**
     * Create an instance of {@link JAXBElement }{@code <}{@link java.lang.String }{@code >}}
     * 
     */
    @XmlElementDecl(namespace = "", name = "software", scope = Encoding.class)
    public JAXBElement<java.lang.String> createEncodingSoftware(java.lang.String value) {
        return new JAXBElement<java.lang.String>(_EncodingSoftware_QNAME, java.lang.String.class, Encoding.class, value);
    }

    /**
     * Create an instance of {@link JAXBElement }{@code <}{@link Supports }{@code >}}
     * 
     */
    @XmlElementDecl(namespace = "", name = "supports", scope = Encoding.class)
    public JAXBElement<Supports> createEncodingSupports(Supports value) {
        return new JAXBElement<Supports>(_EncodingSupports_QNAME, Supports.class, Encoding.class, value);
    }

    /**
     * Create an instance of {@link JAXBElement }{@code <}{@link XMLGregorianCalendar }{@code >}}
     * 
     */
    @XmlElementDecl(namespace = "", name = "encoding-date", scope = Encoding.class)
    public JAXBElement<XMLGregorianCalendar> createEncodingEncodingDate(XMLGregorianCalendar value) {
        return new JAXBElement<XMLGregorianCalendar>(_EncodingEncodingDate_QNAME, XMLGregorianCalendar.class, Encoding.class, value);
    }

    /**
     * Create an instance of {@link JAXBElement }{@code <}{@link TypedText }{@code >}}
     * 
     */
    @XmlElementDecl(namespace = "", name = "encoder", scope = Encoding.class)
    public JAXBElement<TypedText> createEncodingEncoder(TypedText value) {
        return new JAXBElement<TypedText>(_EncodingEncoder_QNAME, TypedText.class, Encoding.class, value);
    }

    /**
     * Create an instance of {@link JAXBElement }{@code <}{@link java.lang.String }{@code >}}
     * 
     */
    @XmlElementDecl(namespace = "", name = "encoding-description", scope = Encoding.class)
    public JAXBElement<java.lang.String> createEncodingEncodingDescription(java.lang.String value) {
        return new JAXBElement<java.lang.String>(_EncodingEncodingDescription_QNAME, java.lang.String.class, Encoding.class, value);
    }

}
